// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"lang.pkg/ent/book"
)

// Book is the model entity for the Book schema.
type Book struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// BookID holds the value of the "book_id" field.
	BookID string `json:"book_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Public holds the value of the "public" field.
	Public bool `json:"public,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BookQuery when eager-loading is set.
	Edges BookEdges `json:"edges"`
}

// BookEdges holds the relations/edges for other nodes in the graph.
type BookEdges struct {
	// Vocas holds the value of the vocas edge.
	Vocas []*Voca
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// VocasOrErr returns the Vocas value or an error if the edge
// was not loaded in eager-loading.
func (e BookEdges) VocasOrErr() ([]*Voca, error) {
	if e.loadedTypes[0] {
		return e.Vocas, nil
	}
	return nil, &NotLoadedError{edge: "vocas"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Book) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // book_id
		&sql.NullString{}, // title
		&sql.NullString{}, // description
		&sql.NullBool{},   // public
		&sql.NullTime{},   // created_at
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Book fields.
func (b *Book) assignValues(values ...interface{}) error {
	if m, n := len(values), len(book.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	b.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field book_id", values[0])
	} else if value.Valid {
		b.BookID = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field title", values[1])
	} else if value.Valid {
		b.Title = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field description", values[2])
	} else if value.Valid {
		b.Description = value.String
	}
	if value, ok := values[3].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field public", values[3])
	} else if value.Valid {
		b.Public = value.Bool
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[4])
	} else if value.Valid {
		b.CreatedAt = value.Time
	}
	return nil
}

// QueryVocas queries the vocas edge of the Book.
func (b *Book) QueryVocas() *VocaQuery {
	return (&BookClient{config: b.config}).QueryVocas(b)
}

// Update returns a builder for updating this Book.
// Note that, you need to call Book.Unwrap() before calling this method, if this Book
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Book) Update() *BookUpdateOne {
	return (&BookClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (b *Book) Unwrap() *Book {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Book is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Book) String() string {
	var builder strings.Builder
	builder.WriteString("Book(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", book_id=")
	builder.WriteString(b.BookID)
	builder.WriteString(", title=")
	builder.WriteString(b.Title)
	builder.WriteString(", description=")
	builder.WriteString(b.Description)
	builder.WriteString(", public=")
	builder.WriteString(fmt.Sprintf("%v", b.Public))
	builder.WriteString(", created_at=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Books is a parsable slice of Book.
type Books []*Book

func (b Books) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
