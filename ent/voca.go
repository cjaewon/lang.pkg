// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/google/uuid"
	"lang.pkg/ent/voca"
)

// Voca is the model entity for the Voca schema.
type Voca struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Example holds the value of the "example" field.
	Example *string `json:"example,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt  time.Time `json:"created_at,omitempty"`
	book_vocas *int
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Voca) scanValues() []interface{} {
	return []interface{}{
		&uuid.UUID{},      // id
		&sql.NullString{}, // key
		&sql.NullString{}, // value
		&sql.NullString{}, // example
		&sql.NullTime{},   // created_at
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Voca) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // book_vocas
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Voca fields.
func (v *Voca) assignValues(values ...interface{}) error {
	if m, n := len(values), len(voca.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		v.ID = *value
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field key", values[0])
	} else if value.Valid {
		v.Key = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field value", values[1])
	} else if value.Valid {
		v.Value = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field example", values[2])
	} else if value.Valid {
		v.Example = new(string)
		*v.Example = value.String
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[3])
	} else if value.Valid {
		v.CreatedAt = value.Time
	}
	values = values[4:]
	if len(values) == len(voca.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field book_vocas", value)
		} else if value.Valid {
			v.book_vocas = new(int)
			*v.book_vocas = int(value.Int64)
		}
	}
	return nil
}

// Update returns a builder for updating this Voca.
// Note that, you need to call Voca.Unwrap() before calling this method, if this Voca
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Voca) Update() *VocaUpdateOne {
	return (&VocaClient{config: v.config}).UpdateOne(v)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (v *Voca) Unwrap() *Voca {
	tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Voca is not a transactional entity")
	}
	v.config.driver = tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Voca) String() string {
	var builder strings.Builder
	builder.WriteString("Voca(")
	builder.WriteString(fmt.Sprintf("id=%v", v.ID))
	builder.WriteString(", key=")
	builder.WriteString(v.Key)
	builder.WriteString(", value=")
	builder.WriteString(v.Value)
	if v := v.Example; v != nil {
		builder.WriteString(", example=")
		builder.WriteString(*v)
	}
	builder.WriteString(", created_at=")
	builder.WriteString(v.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Vocas is a parsable slice of Voca.
type Vocas []*Voca

func (v Vocas) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
